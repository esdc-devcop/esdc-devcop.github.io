# - focus:                # Required; What is the focus of the tool recommendation on
#   scope:                # Optional; Does the focus need scoping, if so add it.
#   tools:                # 1 Required
#     - name:             # Required; Name of the tool
#       documentation:    # Optional; Link to the documentation
#       recommendation:   # Optional; Link to a recommendation on the tool
#       application:      # Optional; Link to the SaaS implementation of the tool
#   alternatives:         # Optional; list same as Tools, plus
#     - rational:         # Required; Plain text, condition of why the alternative could be considered
#   description:          # Optional; Plain text describing the focus/scope of the recommendation as needed.
#   tags:                 # Optional; List of tags related to the tools or focus.

development:
  - focus: Source Control
    scope: Technology
    tools:
      - name: Git
        documentation: https://git-scm.com/
    tags:
      - Branching

  - focus: Source Control
    scope: Management
    tools:
      - name: GCcode
        application: https://gccode.ssc-spc.gc.ca/iitb-dgiit/
        recommendation: https://github.com/esdc-edsc/Welcome/blob/master/Recommendations/GCcode.md
      - name: Azure DevOps (on-prem)
        application: http://ado.intra.dmz
      - name: GitHub
        application: https://github.com/
    tags:
      - ALM

  - focus: Unit Testing Frameworks
    scope: .NET
    tools:
      - name: NSubstitute
        documentation: https://nsubstitute.github.io/
      - name: xUnit
        documentation: https://xunit.net/
      - name: AutoFixture
        documentation: https://github.com/AutoFixture/AutoFixture
      - name: FluentAssertions
        documentation: https://fluentassertions.com/
    description: All the recommended tools can be used in combination with each other to create a very cohesive testing framework. NSubstitue works inside AutoFixture giving you the ability to mock classes. xUnit is a cleaner way to execute tests over the default Microsoft framework while FluentAssertions makes your coded tests more human readable.
    tags:
      - Testing

  - focus: Unit Testing Frameworks
    scope: JS / TypeScript
    tools:
      - name: Jest
        documentation: https://jestjs.io/
    tags:
      - Testing

  - focus: Logging
    scope: .NET
    tools:
      - name: NLog
        documentation: http://nlog-project.org/
    tags:
      - Operations
  
  - focus: Asset Management
    tools:
      - name: Artifactory
        application: https://jade-repos.intra.dev/artifactory/webapp/#/home
        recommendation: https://esdc-devcop.github.io/recommendations/artifactory.html
  
  - focus: Programming Language
    tools:
      - name: TypeScript
        documentation:  https://www.typescriptlang.org/
  
  - focus: Programming Frameworks
    scope: .NET
    tools:
      - name: ASP.NET Core
        documentation: https://docs.microsoft.com/en-ca/dotnet/
      - name: DotNetTemplates - CoreMVC
        documentation: https://gccode.ssc-spc.gc.ca/iitb-dgiit/sds/GOCWebTemplates/DotNetTemplates
  
  - focus: Programming Frameworks
    scope: Java
    tools:
      - name: JavaTemplates - Spring Boot
        documentation: https://gccode.ssc-spc.gc.ca/iitb-dgiit/sds/GOCWebTemplates/JavaTemplates
  
  - focus: Programming Frameworks
    scope: JS / TypeScript
    tools:
      - name: Vue.js CLI
        documentation: https://cli.vuejs.org/
  
  - focus: Smoke Testing
    tools:
      - name: Selenium
        documentation: https://www.seleniumhq.org/
      - name: Puppeteer
        documentation: https://github.com/puppeteer/puppeteer
    tags:
      - Testing
    
  - focus: Security Testing
    scope: SAST (Legacy & Cloud)
    tools:
      - name: Microfocus Fortify Static Code Analyzer
        documentation: https://www.microfocus.com/en-us/products/static-code-analysis-sast/overview
    description: SAST (Static Application Security Testing) designed to scan the code looking for vulnerabilities, helping enforce conformance to coding guidelines and standards. It is done without executing the code.
    tags:
      - Testing
      - Security

  - focus: Security Testing
    scope: DAST (Legacy & Cloud)
    tools:
      - name: Microfocus Fortify WebInspect
        documentation: https://www.microfocus.com/en-us/products/webinspect-dynamic-analysis-dast/overview
    description: DAST (Dynamic Application Security Testing) executes against the running code attempting to inject malicious data against the software looking for vulnerabilities. This can help identify runtime problems.
    tags:
      - Testing
      - Security

  - focus: Security Testing
    scope: SCA (Cloud only)
    tools:
      - name: Sonatype Nexus Lifecycle
        documentation: https://www.sonatype.com/product-nexus-lifecycle
    tags:
      - Testing
      - Security

  - focus: Security Testing
    scope: AVM (Cloud only)
    tools:
      - name: Denim Group Threadfix
        documentation: https://threadfix.it/
    tags:
      - Testing
      - Security 

  - focus: Security Testing
    scope: Container Security (Cloud only)
    tools:
      - name: Aqua
        documentation: https://www.aquasec.com/
    tags:
      - Testing
      - Security

  - focus: A11y Testing
    tools:
      - name: Axe-Core
        documentation: https://www.deque.com/axe/
    description: Axe-Core is a great tool to quickly test for most of the common accessability issues.
    tags:
      - Testing
      - Accessability
